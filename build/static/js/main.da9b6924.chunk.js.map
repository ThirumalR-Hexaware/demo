{"version":3,"sources":["logo.svg","ServerInfo.js","ProcessDefsInfo.js","ProcessInstancesInfo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ServerInfo","getServerData","fetch","headers","Accept","Content-Type","then","response","json","data","_this","setState","setInterval","this","haveData","state","result","undefined","react_default","a","createElement","class","className","name","id","version","location","capabilities","map","capability","Component","ProcessDefsInfo","getProcessDefsData","handleStartProcess","cid","pid","method","_this2","processes","scope","processdef","type","onClick","ProcessInstancesInfo","getProcessInstancesData","instances","processinst","processName","App","src","logo","alt","src_ServerInfo","src_ProcessDefsInfo","src_ProcessInstancesInfo","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.da9b6924.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from \"react\";\nimport \"./App.css\";\n\nclass ServerInfo extends Component {\n\n    componentDidMount() {\n        setInterval(this.getServerData, 2000);\n    }\n\n    getServerData = () => {\n        fetch('/rest/server',\n                {\n                    headers: {\n                        'Accept': 'application/json',\n                        'Content-Type': 'application/json'\n                    }\n                })\n                .then(response => response.json())\n                .then(data => {\n                    this.setState(data);\n                });\n    };\n\n    render() {\n        const haveData = this.state && this.state.result && this.state.result !== undefined && this.state.result[\"kie-server-info\"];\n        return (\n                <div class=\"card mb-4\">\n                    <div class=\"view overlay\" className=\"ReactTitleStyle4\">\n                        <center><strong>Server Info</strong></center>\n                    </div>\n                    <div class=\"card-body jbpm-card-body\">\n                        <dl class=\"row\">\n                            <dt class=\"col-sm-3\">Name</dt>\n                            {haveData ? (\n                                    <dd class=\"col-sm-9\">{this.state.result[\"kie-server-info\"].name}</dd>\n                            ) : (\n                                    <dd class=\"col-sm-9\"></dd>\n                            )}\n\n                            <dt class=\"col-sm-3\">Id</dt>\n                            {haveData ? (\n                                    <dd class=\"col-sm-9\">{this.state.result[\"kie-server-info\"].id}</dd>\n                            ) : (\n                                    <dd class=\"col-sm-9\"></dd>\n                            )}\n\n                            <dt class=\"col-sm-3\">Version</dt>\n                            {haveData ? (\n                                    <dd class=\"col-sm-9\">{this.state.result[\"kie-server-info\"].version}</dd>\n                            ) : (\n                                    <dd class=\"col-sm-9\"></dd>\n                            )}\n\n                            <dt class=\"col-sm-3\">Location</dt>\n                            {haveData ? (\n                                    <dd class=\"col-sm-9\">{this.state.result[\"kie-server-info\"].location}</dd>\n                            ) : (\n                                    <dd class=\"col-sm-9\"></dd>\n                            )}\n\n                            <dt class=\"col-sm-3\">Capabilities</dt>\n                            {haveData ? (\n                                    <dd class=\"col-sm-9\">\n                                        <ul>\n                                            {this.state.result[\"kie-server-info\"].capabilities.map(capability => (\n                                                    <li>{capability}</li>\n                                            ))\n                                            }\n                                        </ul>\n                                    </dd>\n                            ) : (\n                                    <dd class=\"col-sm-9\"></dd>\n                            )}\n                        </dl>\n                    </div>\n                </div>\n        );\n    }\n}\n\nexport default ServerInfo;","import React, {Component} from \"react\";\nimport \"./App.css\";\n\nclass ProcessDefsInfo extends Component {\n\n    componentDidMount() {\n        setInterval(this.getProcessDefsData, 2000);\n    }\n\n    getProcessDefsData = () => {\n        fetch('/rest/server/containers/sample-react-kjar/processes',\n                {\n                    headers: {\n                        'Accept': 'application/json',\n                        'Content-Type': 'application/json'\n                    }\n                })\n                .then(response => response.json())\n                .then(data => {\n                    this.setState(data);\n                });\n    };\n\n    handleStartProcess = (cid, pid) => {\n        fetch('/rest/server/containers/' + cid + '/processes/' + pid + '/instances', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            }\n        })\n    };\n\n    render() {\n        const haveData = this.state && this.state.processes;\n        return (\n                <div class=\"card mb-4\">\n                    <div class=\"view overlay\" className=\"ReactTitleStyle2\">\n                        <center><strong>Process Definitions</strong></center>\n                    </div>\n                    <div class=\"card-body jbpm-card-body\">\n                        {haveData ? (\n                                <table class=\"table mb-0\">\n                                    <thead>\n                                    <tr>\n                                        <th scope=\"col\">Name</th>\n                                        <th scope=\"col\">Action</th>\n                                    </tr>\n                                    </thead>\n                                    <tbody>\n                                    {this.state.processes.map(processdef => (\n                                            <tr>\n                                                <td><small>{processdef[\"process-name\"]}</small></td>\n                                                <td><button type=\"button\" class=\"btn btn-primary\" onClick={() => this.handleStartProcess(processdef[\"container-id\"],processdef[\"process-id\"])}>Start</button></td>\n                                            </tr>\n                                    ))\n                                    }\n                                    </tbody>\n                                </table>\n                        ) : (\n                                <table class=\"table\">\n                                    <thead>\n                                    <tr>\n                                        <th scope=\"col\">Id</th>\n                                        <th scope=\"col\">Name</th>\n                                        <th scope=\"col\">Version</th>\n                                        <th scope=\"col\">Action</th>\n                                    </tr>\n                                    </thead>\n                                    <tbody>\n                                    </tbody>\n                                </table>\n                        )}\n                    </div>\n                </div>\n        );\n    }\n}\n\nexport default ProcessDefsInfo;","import React, {Component} from \"react\";\nimport \"./App.css\";\n\nclass ProcessInstancesInfo extends Component {\n\n    componentDidMount() {\n        setInterval(this.getProcessInstancesData, 2000);\n    }\n\n    getProcessInstancesData = () => {\n        fetch('/processinstances',\n                {\n                    headers: {\n                        'Accept': 'application/json',\n                        'Content-Type': 'application/json'\n                    }\n                })\n                .then(response => response.json())\n                .then(data => {\n                    this.setState({\n                        instances : data\n                    });\n                });\n    };\n\n    render() {\n        const haveData = this.state && this.state.instances;\n        return (\n                <div class=\"card mb-4\">\n                    <div class=\"view overlay\" className=\"ReactTitleStyle3\">\n                        <center><strong>Process Instances</strong></center>\n                    </div>\n                    <div class=\"card-body jbpm-card-body\">\n                        {haveData ? (\n                                <table class=\"table mb-0\">\n                                    <thead>\n                                    <tr>\n                                        <th scope=\"col\">Id</th>\n                                        <th scope=\"col\">Name</th>\n                                    </tr>\n                                    </thead>\n                                    <tbody>\n                                    {this.state.instances.map(processinst => (\n                                            <tr>\n                                                <td><small>{processinst.id}</small></td>\n                                                <td><small>{processinst.processName}</small></td>\n                                            </tr>\n                                    ))\n                                    }\n                                    </tbody>\n                                </table>\n                        ) : (\n                                <table class=\"table\">\n                                    <thead>\n                                    <tr>\n                                        <th scope=\"col\">Id</th>\n                                        <th scope=\"col\">Name</th>\n                                    </tr>\n                                    </thead>\n                                    <tbody>\n                                    </tbody>\n                                </table>\n                        )}\n                    </div>\n                </div>\n        );\n    }\n}\n\nexport default ProcessInstancesInfo;","import \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport \"../node_modules/bootstrap/dist/js/bootstrap.bundle.min\";\n\nimport React, {Component} from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport ServerInfo from \"./ServerInfo\";\nimport ProcessDefsInfo from \"./ProcessDefsInfo\";\nimport ProcessInstancesInfo from \"./ProcessInstancesInfo\";\n\nclass App extends Component {\n\n    render() {\n        return (\n                <div className=\"App\">\n                    <div class=\"jumbotron jumbotron-fluid\" className=\"ReactTitleStyle\">\n                        <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                        <p>\n                            <strong><h3>Welcome to your jBPM React Business Application!</h3></strong>\n                        </p>\n                        <br/>\n                    </div>\n\n                    <div class=\"container-fluid\">\n                        <div class=\"row justify-content-center\">\n                            <div class=\"card-deck\">\n                                <ServerInfo/>\n                                <ProcessDefsInfo/>\n                                <ProcessInstancesInfo/>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}